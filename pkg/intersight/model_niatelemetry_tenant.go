/*
 * Cisco Intersight
 *
 * Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-07-31T04:35:53Z.
 *
 * API version: 1.0.9-2110
 * Contact: intersight@cisco.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package intersight

import (
	"encoding/json"
	"reflect"
	"strings"
)

// NiatelemetryTenant Object is available at Tenant scope. This currently applies only to the APIC environemt.
type NiatelemetryTenant struct {
	MoBaseMo
	// Bidirectional Forwarding Detection bfdIfPol Model Object count scale.
	BfdIfPolCount *int64 `json:"BfdIfPolCount,omitempty"`
	// Bidirectional Forwarding Detection Interface Policy count scale.
	BfdIfpCount *int64 `json:"BfdIfpCount,omitempty"`
	// Dn for the tenants present.
	Dn *string `json:"Dn,omitempty"`
	// First hop security count scale. Checks for presence of IP source gaurd, dynamic arp inspection.
	FhsBdPolCount *int64 `json:"FhsBdPolCount,omitempty"`
	// First hop security count scale. Checks for presence of IP source gaurd, dynamic arp inspection.
	FvRsBdToFhsCount *int64 `json:"FvRsBdToFhsCount,omitempty"`
	// Multi-Site scale for fvSiteConnp Model Object.
	FvSiteConnpCount *int64 `json:"FvSiteConnpCount,omitempty"`
	// Number of layer 3 multicasts.
	L3MulticastCount *int64 `json:"L3MulticastCount,omitempty"`
	// Number of layer 3 multicast CtxP.
	L3MulticastCtxCount *int64 `json:"L3MulticastCtxCount,omitempty"`
	// Number of layer 3 multicast IfP.
	L3MulticastIfCount *int64 `json:"L3MulticastIfCount,omitempty"`
	// L3 out scale for the tenants present.
	L3outCount *int64 `json:"L3outCount,omitempty"`
	// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites.
	SiteName *string `json:"SiteName,omitempty"`
	// SSM property feature usage.
	Ssm *string `json:"Ssm,omitempty"`
	// Number of ITrace route endpoint per tenant.
	TraceRouteEpCount *int64 `json:"TraceRouteEpCount,omitempty"`
	// Number of ITrace endpoint external routes per tenant.
	TraceRouteEpExtCount *int64 `json:"TraceRouteEpExtCount,omitempty"`
	// Number of ITrace external endpoint routes per tenant.
	TraceRouteExtEpCount *int64 `json:"TraceRouteExtEpCount,omitempty"`
	// Number of ITrace external routes per tenant.
	TraceRouteExtExtCount *int64 `json:"TraceRouteExtExtCount,omitempty"`
	// L4 to L7 Services graph count scale.
	VnsAbsGraphCount *int64 `json:"VnsAbsGraphCount,omitempty"`
	// Policy Based Routing standby Node count scale. Checks the Policy Based Routing backup policy.
	VnsBackupPolCount *int64 `json:"VnsBackupPolCount,omitempty"`
	// Policy Based Routing standby Node count scale. Policy based redirect requires a destination to redirect traffic.
	VnsRedirectDestCount *int64 `json:"VnsRedirectDestCount,omitempty"`
	// Policy Based Routing and Policy Based Service Insertion count scale. Includes without L4-L7 package.
	VnsSvcRedirectPolCount *int64 `json:"VnsSvcRedirectPolCount,omitempty"`
	// Vrf scale count per tenant.
	VrfCount             *int64                               `json:"VrfCount,omitempty"`
	RegisteredDevice     *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NiatelemetryTenant NiatelemetryTenant

// NewNiatelemetryTenant instantiates a new NiatelemetryTenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNiatelemetryTenant() *NiatelemetryTenant {
	this := NiatelemetryTenant{}
	return &this
}

// NewNiatelemetryTenantWithDefaults instantiates a new NiatelemetryTenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNiatelemetryTenantWithDefaults() *NiatelemetryTenant {
	this := NiatelemetryTenant{}
	return &this
}

// GetBfdIfPolCount returns the BfdIfPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetBfdIfPolCount() int64 {
	if o == nil || o.BfdIfPolCount == nil {
		var ret int64
		return ret
	}
	return *o.BfdIfPolCount
}

// GetBfdIfPolCountOk returns a tuple with the BfdIfPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetBfdIfPolCountOk() (*int64, bool) {
	if o == nil || o.BfdIfPolCount == nil {
		return nil, false
	}
	return o.BfdIfPolCount, true
}

// HasBfdIfPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasBfdIfPolCount() bool {
	if o != nil && o.BfdIfPolCount != nil {
		return true
	}

	return false
}

// SetBfdIfPolCount gets a reference to the given int64 and assigns it to the BfdIfPolCount field.
func (o *NiatelemetryTenant) SetBfdIfPolCount(v int64) {
	o.BfdIfPolCount = &v
}

// GetBfdIfpCount returns the BfdIfpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetBfdIfpCount() int64 {
	if o == nil || o.BfdIfpCount == nil {
		var ret int64
		return ret
	}
	return *o.BfdIfpCount
}

// GetBfdIfpCountOk returns a tuple with the BfdIfpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetBfdIfpCountOk() (*int64, bool) {
	if o == nil || o.BfdIfpCount == nil {
		return nil, false
	}
	return o.BfdIfpCount, true
}

// HasBfdIfpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasBfdIfpCount() bool {
	if o != nil && o.BfdIfpCount != nil {
		return true
	}

	return false
}

// SetBfdIfpCount gets a reference to the given int64 and assigns it to the BfdIfpCount field.
func (o *NiatelemetryTenant) SetBfdIfpCount(v int64) {
	o.BfdIfpCount = &v
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetDn() string {
	if o == nil || o.Dn == nil {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetDnOk() (*string, bool) {
	if o == nil || o.Dn == nil {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasDn() bool {
	if o != nil && o.Dn != nil {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *NiatelemetryTenant) SetDn(v string) {
	o.Dn = &v
}

// GetFhsBdPolCount returns the FhsBdPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFhsBdPolCount() int64 {
	if o == nil || o.FhsBdPolCount == nil {
		var ret int64
		return ret
	}
	return *o.FhsBdPolCount
}

// GetFhsBdPolCountOk returns a tuple with the FhsBdPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFhsBdPolCountOk() (*int64, bool) {
	if o == nil || o.FhsBdPolCount == nil {
		return nil, false
	}
	return o.FhsBdPolCount, true
}

// HasFhsBdPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFhsBdPolCount() bool {
	if o != nil && o.FhsBdPolCount != nil {
		return true
	}

	return false
}

// SetFhsBdPolCount gets a reference to the given int64 and assigns it to the FhsBdPolCount field.
func (o *NiatelemetryTenant) SetFhsBdPolCount(v int64) {
	o.FhsBdPolCount = &v
}

// GetFvRsBdToFhsCount returns the FvRsBdToFhsCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvRsBdToFhsCount() int64 {
	if o == nil || o.FvRsBdToFhsCount == nil {
		var ret int64
		return ret
	}
	return *o.FvRsBdToFhsCount
}

// GetFvRsBdToFhsCountOk returns a tuple with the FvRsBdToFhsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvRsBdToFhsCountOk() (*int64, bool) {
	if o == nil || o.FvRsBdToFhsCount == nil {
		return nil, false
	}
	return o.FvRsBdToFhsCount, true
}

// HasFvRsBdToFhsCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvRsBdToFhsCount() bool {
	if o != nil && o.FvRsBdToFhsCount != nil {
		return true
	}

	return false
}

// SetFvRsBdToFhsCount gets a reference to the given int64 and assigns it to the FvRsBdToFhsCount field.
func (o *NiatelemetryTenant) SetFvRsBdToFhsCount(v int64) {
	o.FvRsBdToFhsCount = &v
}

// GetFvSiteConnpCount returns the FvSiteConnpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetFvSiteConnpCount() int64 {
	if o == nil || o.FvSiteConnpCount == nil {
		var ret int64
		return ret
	}
	return *o.FvSiteConnpCount
}

// GetFvSiteConnpCountOk returns a tuple with the FvSiteConnpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetFvSiteConnpCountOk() (*int64, bool) {
	if o == nil || o.FvSiteConnpCount == nil {
		return nil, false
	}
	return o.FvSiteConnpCount, true
}

// HasFvSiteConnpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasFvSiteConnpCount() bool {
	if o != nil && o.FvSiteConnpCount != nil {
		return true
	}

	return false
}

// SetFvSiteConnpCount gets a reference to the given int64 and assigns it to the FvSiteConnpCount field.
func (o *NiatelemetryTenant) SetFvSiteConnpCount(v int64) {
	o.FvSiteConnpCount = &v
}

// GetL3MulticastCount returns the L3MulticastCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3MulticastCount() int64 {
	if o == nil || o.L3MulticastCount == nil {
		var ret int64
		return ret
	}
	return *o.L3MulticastCount
}

// GetL3MulticastCountOk returns a tuple with the L3MulticastCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3MulticastCountOk() (*int64, bool) {
	if o == nil || o.L3MulticastCount == nil {
		return nil, false
	}
	return o.L3MulticastCount, true
}

// HasL3MulticastCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3MulticastCount() bool {
	if o != nil && o.L3MulticastCount != nil {
		return true
	}

	return false
}

// SetL3MulticastCount gets a reference to the given int64 and assigns it to the L3MulticastCount field.
func (o *NiatelemetryTenant) SetL3MulticastCount(v int64) {
	o.L3MulticastCount = &v
}

// GetL3MulticastCtxCount returns the L3MulticastCtxCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3MulticastCtxCount() int64 {
	if o == nil || o.L3MulticastCtxCount == nil {
		var ret int64
		return ret
	}
	return *o.L3MulticastCtxCount
}

// GetL3MulticastCtxCountOk returns a tuple with the L3MulticastCtxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3MulticastCtxCountOk() (*int64, bool) {
	if o == nil || o.L3MulticastCtxCount == nil {
		return nil, false
	}
	return o.L3MulticastCtxCount, true
}

// HasL3MulticastCtxCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3MulticastCtxCount() bool {
	if o != nil && o.L3MulticastCtxCount != nil {
		return true
	}

	return false
}

// SetL3MulticastCtxCount gets a reference to the given int64 and assigns it to the L3MulticastCtxCount field.
func (o *NiatelemetryTenant) SetL3MulticastCtxCount(v int64) {
	o.L3MulticastCtxCount = &v
}

// GetL3MulticastIfCount returns the L3MulticastIfCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3MulticastIfCount() int64 {
	if o == nil || o.L3MulticastIfCount == nil {
		var ret int64
		return ret
	}
	return *o.L3MulticastIfCount
}

// GetL3MulticastIfCountOk returns a tuple with the L3MulticastIfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3MulticastIfCountOk() (*int64, bool) {
	if o == nil || o.L3MulticastIfCount == nil {
		return nil, false
	}
	return o.L3MulticastIfCount, true
}

// HasL3MulticastIfCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3MulticastIfCount() bool {
	if o != nil && o.L3MulticastIfCount != nil {
		return true
	}

	return false
}

// SetL3MulticastIfCount gets a reference to the given int64 and assigns it to the L3MulticastIfCount field.
func (o *NiatelemetryTenant) SetL3MulticastIfCount(v int64) {
	o.L3MulticastIfCount = &v
}

// GetL3outCount returns the L3outCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetL3outCount() int64 {
	if o == nil || o.L3outCount == nil {
		var ret int64
		return ret
	}
	return *o.L3outCount
}

// GetL3outCountOk returns a tuple with the L3outCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetL3outCountOk() (*int64, bool) {
	if o == nil || o.L3outCount == nil {
		return nil, false
	}
	return o.L3outCount, true
}

// HasL3outCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasL3outCount() bool {
	if o != nil && o.L3outCount != nil {
		return true
	}

	return false
}

// SetL3outCount gets a reference to the given int64 and assigns it to the L3outCount field.
func (o *NiatelemetryTenant) SetL3outCount(v int64) {
	o.L3outCount = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetSiteName() string {
	if o == nil || o.SiteName == nil {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetSiteNameOk() (*string, bool) {
	if o == nil || o.SiteName == nil {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasSiteName() bool {
	if o != nil && o.SiteName != nil {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *NiatelemetryTenant) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSsm returns the Ssm field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetSsm() string {
	if o == nil || o.Ssm == nil {
		var ret string
		return ret
	}
	return *o.Ssm
}

// GetSsmOk returns a tuple with the Ssm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetSsmOk() (*string, bool) {
	if o == nil || o.Ssm == nil {
		return nil, false
	}
	return o.Ssm, true
}

// HasSsm returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasSsm() bool {
	if o != nil && o.Ssm != nil {
		return true
	}

	return false
}

// SetSsm gets a reference to the given string and assigns it to the Ssm field.
func (o *NiatelemetryTenant) SetSsm(v string) {
	o.Ssm = &v
}

// GetTraceRouteEpCount returns the TraceRouteEpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteEpCount() int64 {
	if o == nil || o.TraceRouteEpCount == nil {
		var ret int64
		return ret
	}
	return *o.TraceRouteEpCount
}

// GetTraceRouteEpCountOk returns a tuple with the TraceRouteEpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteEpCountOk() (*int64, bool) {
	if o == nil || o.TraceRouteEpCount == nil {
		return nil, false
	}
	return o.TraceRouteEpCount, true
}

// HasTraceRouteEpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteEpCount() bool {
	if o != nil && o.TraceRouteEpCount != nil {
		return true
	}

	return false
}

// SetTraceRouteEpCount gets a reference to the given int64 and assigns it to the TraceRouteEpCount field.
func (o *NiatelemetryTenant) SetTraceRouteEpCount(v int64) {
	o.TraceRouteEpCount = &v
}

// GetTraceRouteEpExtCount returns the TraceRouteEpExtCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteEpExtCount() int64 {
	if o == nil || o.TraceRouteEpExtCount == nil {
		var ret int64
		return ret
	}
	return *o.TraceRouteEpExtCount
}

// GetTraceRouteEpExtCountOk returns a tuple with the TraceRouteEpExtCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteEpExtCountOk() (*int64, bool) {
	if o == nil || o.TraceRouteEpExtCount == nil {
		return nil, false
	}
	return o.TraceRouteEpExtCount, true
}

// HasTraceRouteEpExtCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteEpExtCount() bool {
	if o != nil && o.TraceRouteEpExtCount != nil {
		return true
	}

	return false
}

// SetTraceRouteEpExtCount gets a reference to the given int64 and assigns it to the TraceRouteEpExtCount field.
func (o *NiatelemetryTenant) SetTraceRouteEpExtCount(v int64) {
	o.TraceRouteEpExtCount = &v
}

// GetTraceRouteExtEpCount returns the TraceRouteExtEpCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteExtEpCount() int64 {
	if o == nil || o.TraceRouteExtEpCount == nil {
		var ret int64
		return ret
	}
	return *o.TraceRouteExtEpCount
}

// GetTraceRouteExtEpCountOk returns a tuple with the TraceRouteExtEpCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteExtEpCountOk() (*int64, bool) {
	if o == nil || o.TraceRouteExtEpCount == nil {
		return nil, false
	}
	return o.TraceRouteExtEpCount, true
}

// HasTraceRouteExtEpCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteExtEpCount() bool {
	if o != nil && o.TraceRouteExtEpCount != nil {
		return true
	}

	return false
}

// SetTraceRouteExtEpCount gets a reference to the given int64 and assigns it to the TraceRouteExtEpCount field.
func (o *NiatelemetryTenant) SetTraceRouteExtEpCount(v int64) {
	o.TraceRouteExtEpCount = &v
}

// GetTraceRouteExtExtCount returns the TraceRouteExtExtCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetTraceRouteExtExtCount() int64 {
	if o == nil || o.TraceRouteExtExtCount == nil {
		var ret int64
		return ret
	}
	return *o.TraceRouteExtExtCount
}

// GetTraceRouteExtExtCountOk returns a tuple with the TraceRouteExtExtCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetTraceRouteExtExtCountOk() (*int64, bool) {
	if o == nil || o.TraceRouteExtExtCount == nil {
		return nil, false
	}
	return o.TraceRouteExtExtCount, true
}

// HasTraceRouteExtExtCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasTraceRouteExtExtCount() bool {
	if o != nil && o.TraceRouteExtExtCount != nil {
		return true
	}

	return false
}

// SetTraceRouteExtExtCount gets a reference to the given int64 and assigns it to the TraceRouteExtExtCount field.
func (o *NiatelemetryTenant) SetTraceRouteExtExtCount(v int64) {
	o.TraceRouteExtExtCount = &v
}

// GetVnsAbsGraphCount returns the VnsAbsGraphCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsAbsGraphCount() int64 {
	if o == nil || o.VnsAbsGraphCount == nil {
		var ret int64
		return ret
	}
	return *o.VnsAbsGraphCount
}

// GetVnsAbsGraphCountOk returns a tuple with the VnsAbsGraphCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsAbsGraphCountOk() (*int64, bool) {
	if o == nil || o.VnsAbsGraphCount == nil {
		return nil, false
	}
	return o.VnsAbsGraphCount, true
}

// HasVnsAbsGraphCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsAbsGraphCount() bool {
	if o != nil && o.VnsAbsGraphCount != nil {
		return true
	}

	return false
}

// SetVnsAbsGraphCount gets a reference to the given int64 and assigns it to the VnsAbsGraphCount field.
func (o *NiatelemetryTenant) SetVnsAbsGraphCount(v int64) {
	o.VnsAbsGraphCount = &v
}

// GetVnsBackupPolCount returns the VnsBackupPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsBackupPolCount() int64 {
	if o == nil || o.VnsBackupPolCount == nil {
		var ret int64
		return ret
	}
	return *o.VnsBackupPolCount
}

// GetVnsBackupPolCountOk returns a tuple with the VnsBackupPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsBackupPolCountOk() (*int64, bool) {
	if o == nil || o.VnsBackupPolCount == nil {
		return nil, false
	}
	return o.VnsBackupPolCount, true
}

// HasVnsBackupPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsBackupPolCount() bool {
	if o != nil && o.VnsBackupPolCount != nil {
		return true
	}

	return false
}

// SetVnsBackupPolCount gets a reference to the given int64 and assigns it to the VnsBackupPolCount field.
func (o *NiatelemetryTenant) SetVnsBackupPolCount(v int64) {
	o.VnsBackupPolCount = &v
}

// GetVnsRedirectDestCount returns the VnsRedirectDestCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsRedirectDestCount() int64 {
	if o == nil || o.VnsRedirectDestCount == nil {
		var ret int64
		return ret
	}
	return *o.VnsRedirectDestCount
}

// GetVnsRedirectDestCountOk returns a tuple with the VnsRedirectDestCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsRedirectDestCountOk() (*int64, bool) {
	if o == nil || o.VnsRedirectDestCount == nil {
		return nil, false
	}
	return o.VnsRedirectDestCount, true
}

// HasVnsRedirectDestCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsRedirectDestCount() bool {
	if o != nil && o.VnsRedirectDestCount != nil {
		return true
	}

	return false
}

// SetVnsRedirectDestCount gets a reference to the given int64 and assigns it to the VnsRedirectDestCount field.
func (o *NiatelemetryTenant) SetVnsRedirectDestCount(v int64) {
	o.VnsRedirectDestCount = &v
}

// GetVnsSvcRedirectPolCount returns the VnsSvcRedirectPolCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVnsSvcRedirectPolCount() int64 {
	if o == nil || o.VnsSvcRedirectPolCount == nil {
		var ret int64
		return ret
	}
	return *o.VnsSvcRedirectPolCount
}

// GetVnsSvcRedirectPolCountOk returns a tuple with the VnsSvcRedirectPolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVnsSvcRedirectPolCountOk() (*int64, bool) {
	if o == nil || o.VnsSvcRedirectPolCount == nil {
		return nil, false
	}
	return o.VnsSvcRedirectPolCount, true
}

// HasVnsSvcRedirectPolCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVnsSvcRedirectPolCount() bool {
	if o != nil && o.VnsSvcRedirectPolCount != nil {
		return true
	}

	return false
}

// SetVnsSvcRedirectPolCount gets a reference to the given int64 and assigns it to the VnsSvcRedirectPolCount field.
func (o *NiatelemetryTenant) SetVnsSvcRedirectPolCount(v int64) {
	o.VnsSvcRedirectPolCount = &v
}

// GetVrfCount returns the VrfCount field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetVrfCount() int64 {
	if o == nil || o.VrfCount == nil {
		var ret int64
		return ret
	}
	return *o.VrfCount
}

// GetVrfCountOk returns a tuple with the VrfCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetVrfCountOk() (*int64, bool) {
	if o == nil || o.VrfCount == nil {
		return nil, false
	}
	return o.VrfCount, true
}

// HasVrfCount returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasVrfCount() bool {
	if o != nil && o.VrfCount != nil {
		return true
	}

	return false
}

// SetVrfCount gets a reference to the given int64 and assigns it to the VrfCount field.
func (o *NiatelemetryTenant) SetVrfCount(v int64) {
	o.VrfCount = &v
}

// GetRegisteredDevice returns the RegisteredDevice field value if set, zero value otherwise.
func (o *NiatelemetryTenant) GetRegisteredDevice() AssetDeviceRegistrationRelationship {
	if o == nil || o.RegisteredDevice == nil {
		var ret AssetDeviceRegistrationRelationship
		return ret
	}
	return *o.RegisteredDevice
}

// GetRegisteredDeviceOk returns a tuple with the RegisteredDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NiatelemetryTenant) GetRegisteredDeviceOk() (*AssetDeviceRegistrationRelationship, bool) {
	if o == nil || o.RegisteredDevice == nil {
		return nil, false
	}
	return o.RegisteredDevice, true
}

// HasRegisteredDevice returns a boolean if a field has been set.
func (o *NiatelemetryTenant) HasRegisteredDevice() bool {
	if o != nil && o.RegisteredDevice != nil {
		return true
	}

	return false
}

// SetRegisteredDevice gets a reference to the given AssetDeviceRegistrationRelationship and assigns it to the RegisteredDevice field.
func (o *NiatelemetryTenant) SetRegisteredDevice(v AssetDeviceRegistrationRelationship) {
	o.RegisteredDevice = &v
}

func (o NiatelemetryTenant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMoBaseMo, errMoBaseMo := json.Marshal(o.MoBaseMo)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	errMoBaseMo = json.Unmarshal([]byte(serializedMoBaseMo), &toSerialize)
	if errMoBaseMo != nil {
		return []byte{}, errMoBaseMo
	}
	if o.BfdIfPolCount != nil {
		toSerialize["BfdIfPolCount"] = o.BfdIfPolCount
	}
	if o.BfdIfpCount != nil {
		toSerialize["BfdIfpCount"] = o.BfdIfpCount
	}
	if o.Dn != nil {
		toSerialize["Dn"] = o.Dn
	}
	if o.FhsBdPolCount != nil {
		toSerialize["FhsBdPolCount"] = o.FhsBdPolCount
	}
	if o.FvRsBdToFhsCount != nil {
		toSerialize["FvRsBdToFhsCount"] = o.FvRsBdToFhsCount
	}
	if o.FvSiteConnpCount != nil {
		toSerialize["FvSiteConnpCount"] = o.FvSiteConnpCount
	}
	if o.L3MulticastCount != nil {
		toSerialize["L3MulticastCount"] = o.L3MulticastCount
	}
	if o.L3MulticastCtxCount != nil {
		toSerialize["L3MulticastCtxCount"] = o.L3MulticastCtxCount
	}
	if o.L3MulticastIfCount != nil {
		toSerialize["L3MulticastIfCount"] = o.L3MulticastIfCount
	}
	if o.L3outCount != nil {
		toSerialize["L3outCount"] = o.L3outCount
	}
	if o.SiteName != nil {
		toSerialize["SiteName"] = o.SiteName
	}
	if o.Ssm != nil {
		toSerialize["Ssm"] = o.Ssm
	}
	if o.TraceRouteEpCount != nil {
		toSerialize["TraceRouteEpCount"] = o.TraceRouteEpCount
	}
	if o.TraceRouteEpExtCount != nil {
		toSerialize["TraceRouteEpExtCount"] = o.TraceRouteEpExtCount
	}
	if o.TraceRouteExtEpCount != nil {
		toSerialize["TraceRouteExtEpCount"] = o.TraceRouteExtEpCount
	}
	if o.TraceRouteExtExtCount != nil {
		toSerialize["TraceRouteExtExtCount"] = o.TraceRouteExtExtCount
	}
	if o.VnsAbsGraphCount != nil {
		toSerialize["VnsAbsGraphCount"] = o.VnsAbsGraphCount
	}
	if o.VnsBackupPolCount != nil {
		toSerialize["VnsBackupPolCount"] = o.VnsBackupPolCount
	}
	if o.VnsRedirectDestCount != nil {
		toSerialize["VnsRedirectDestCount"] = o.VnsRedirectDestCount
	}
	if o.VnsSvcRedirectPolCount != nil {
		toSerialize["VnsSvcRedirectPolCount"] = o.VnsSvcRedirectPolCount
	}
	if o.VrfCount != nil {
		toSerialize["VrfCount"] = o.VrfCount
	}
	if o.RegisteredDevice != nil {
		toSerialize["RegisteredDevice"] = o.RegisteredDevice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NiatelemetryTenant) UnmarshalJSON(bytes []byte) (err error) {
	type NiatelemetryTenantWithoutEmbeddedStruct struct {
		// Bidirectional Forwarding Detection bfdIfPol Model Object count scale.
		BfdIfPolCount *int64 `json:"BfdIfPolCount,omitempty"`
		// Bidirectional Forwarding Detection Interface Policy count scale.
		BfdIfpCount *int64 `json:"BfdIfpCount,omitempty"`
		// Dn for the tenants present.
		Dn *string `json:"Dn,omitempty"`
		// First hop security count scale. Checks for presence of IP source gaurd, dynamic arp inspection.
		FhsBdPolCount *int64 `json:"FhsBdPolCount,omitempty"`
		// First hop security count scale. Checks for presence of IP source gaurd, dynamic arp inspection.
		FvRsBdToFhsCount *int64 `json:"FvRsBdToFhsCount,omitempty"`
		// Multi-Site scale for fvSiteConnp Model Object.
		FvSiteConnpCount *int64 `json:"FvSiteConnpCount,omitempty"`
		// Number of layer 3 multicasts.
		L3MulticastCount *int64 `json:"L3MulticastCount,omitempty"`
		// Number of layer 3 multicast CtxP.
		L3MulticastCtxCount *int64 `json:"L3MulticastCtxCount,omitempty"`
		// Number of layer 3 multicast IfP.
		L3MulticastIfCount *int64 `json:"L3MulticastIfCount,omitempty"`
		// L3 out scale for the tenants present.
		L3outCount *int64 `json:"L3outCount,omitempty"`
		// The Site name represents an APIC cluster. Service Engine can onboard multiple APIC clusters / sites.
		SiteName *string `json:"SiteName,omitempty"`
		// SSM property feature usage.
		Ssm *string `json:"Ssm,omitempty"`
		// Number of ITrace route endpoint per tenant.
		TraceRouteEpCount *int64 `json:"TraceRouteEpCount,omitempty"`
		// Number of ITrace endpoint external routes per tenant.
		TraceRouteEpExtCount *int64 `json:"TraceRouteEpExtCount,omitempty"`
		// Number of ITrace external endpoint routes per tenant.
		TraceRouteExtEpCount *int64 `json:"TraceRouteExtEpCount,omitempty"`
		// Number of ITrace external routes per tenant.
		TraceRouteExtExtCount *int64 `json:"TraceRouteExtExtCount,omitempty"`
		// L4 to L7 Services graph count scale.
		VnsAbsGraphCount *int64 `json:"VnsAbsGraphCount,omitempty"`
		// Policy Based Routing standby Node count scale. Checks the Policy Based Routing backup policy.
		VnsBackupPolCount *int64 `json:"VnsBackupPolCount,omitempty"`
		// Policy Based Routing standby Node count scale. Policy based redirect requires a destination to redirect traffic.
		VnsRedirectDestCount *int64 `json:"VnsRedirectDestCount,omitempty"`
		// Policy Based Routing and Policy Based Service Insertion count scale. Includes without L4-L7 package.
		VnsSvcRedirectPolCount *int64 `json:"VnsSvcRedirectPolCount,omitempty"`
		// Vrf scale count per tenant.
		VrfCount         *int64                               `json:"VrfCount,omitempty"`
		RegisteredDevice *AssetDeviceRegistrationRelationship `json:"RegisteredDevice,omitempty"`
	}

	varNiatelemetryTenantWithoutEmbeddedStruct := NiatelemetryTenantWithoutEmbeddedStruct{}

	err = json.Unmarshal(bytes, &varNiatelemetryTenantWithoutEmbeddedStruct)
	if err == nil {
		varNiatelemetryTenant := _NiatelemetryTenant{}
		varNiatelemetryTenant.BfdIfPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.BfdIfPolCount
		varNiatelemetryTenant.BfdIfpCount = varNiatelemetryTenantWithoutEmbeddedStruct.BfdIfpCount
		varNiatelemetryTenant.Dn = varNiatelemetryTenantWithoutEmbeddedStruct.Dn
		varNiatelemetryTenant.FhsBdPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.FhsBdPolCount
		varNiatelemetryTenant.FvRsBdToFhsCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvRsBdToFhsCount
		varNiatelemetryTenant.FvSiteConnpCount = varNiatelemetryTenantWithoutEmbeddedStruct.FvSiteConnpCount
		varNiatelemetryTenant.L3MulticastCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3MulticastCount
		varNiatelemetryTenant.L3MulticastCtxCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3MulticastCtxCount
		varNiatelemetryTenant.L3MulticastIfCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3MulticastIfCount
		varNiatelemetryTenant.L3outCount = varNiatelemetryTenantWithoutEmbeddedStruct.L3outCount
		varNiatelemetryTenant.SiteName = varNiatelemetryTenantWithoutEmbeddedStruct.SiteName
		varNiatelemetryTenant.Ssm = varNiatelemetryTenantWithoutEmbeddedStruct.Ssm
		varNiatelemetryTenant.TraceRouteEpCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteEpCount
		varNiatelemetryTenant.TraceRouteEpExtCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteEpExtCount
		varNiatelemetryTenant.TraceRouteExtEpCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteExtEpCount
		varNiatelemetryTenant.TraceRouteExtExtCount = varNiatelemetryTenantWithoutEmbeddedStruct.TraceRouteExtExtCount
		varNiatelemetryTenant.VnsAbsGraphCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsAbsGraphCount
		varNiatelemetryTenant.VnsBackupPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsBackupPolCount
		varNiatelemetryTenant.VnsRedirectDestCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsRedirectDestCount
		varNiatelemetryTenant.VnsSvcRedirectPolCount = varNiatelemetryTenantWithoutEmbeddedStruct.VnsSvcRedirectPolCount
		varNiatelemetryTenant.VrfCount = varNiatelemetryTenantWithoutEmbeddedStruct.VrfCount
		varNiatelemetryTenant.RegisteredDevice = varNiatelemetryTenantWithoutEmbeddedStruct.RegisteredDevice
		*o = NiatelemetryTenant(varNiatelemetryTenant)
	} else {
		return err
	}

	varNiatelemetryTenant := _NiatelemetryTenant{}

	err = json.Unmarshal(bytes, &varNiatelemetryTenant)
	if err == nil {
		o.MoBaseMo = varNiatelemetryTenant.MoBaseMo
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "BfdIfPolCount")
		delete(additionalProperties, "BfdIfpCount")
		delete(additionalProperties, "Dn")
		delete(additionalProperties, "FhsBdPolCount")
		delete(additionalProperties, "FvRsBdToFhsCount")
		delete(additionalProperties, "FvSiteConnpCount")
		delete(additionalProperties, "L3MulticastCount")
		delete(additionalProperties, "L3MulticastCtxCount")
		delete(additionalProperties, "L3MulticastIfCount")
		delete(additionalProperties, "L3outCount")
		delete(additionalProperties, "SiteName")
		delete(additionalProperties, "Ssm")
		delete(additionalProperties, "TraceRouteEpCount")
		delete(additionalProperties, "TraceRouteEpExtCount")
		delete(additionalProperties, "TraceRouteExtEpCount")
		delete(additionalProperties, "TraceRouteExtExtCount")
		delete(additionalProperties, "VnsAbsGraphCount")
		delete(additionalProperties, "VnsBackupPolCount")
		delete(additionalProperties, "VnsRedirectDestCount")
		delete(additionalProperties, "VnsSvcRedirectPolCount")
		delete(additionalProperties, "VrfCount")
		delete(additionalProperties, "RegisteredDevice")

		// remove fields from embedded structs
		reflectMoBaseMo := reflect.ValueOf(o.MoBaseMo)
		for i := 0; i < reflectMoBaseMo.Type().NumField(); i++ {
			t := reflectMoBaseMo.Type().Field(i)

			if jsonTag := t.Tag.Get("json"); jsonTag != "" {
				fieldName := ""
				if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
					fieldName = jsonTag[:commaIdx]
				} else {
					fieldName = jsonTag
				}
				if fieldName != "AdditionalProperties" {
					delete(additionalProperties, fieldName)
				}
			}
		}

		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNiatelemetryTenant struct {
	value *NiatelemetryTenant
	isSet bool
}

func (v NullableNiatelemetryTenant) Get() *NiatelemetryTenant {
	return v.value
}

func (v *NullableNiatelemetryTenant) Set(val *NiatelemetryTenant) {
	v.value = val
	v.isSet = true
}

func (v NullableNiatelemetryTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableNiatelemetryTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNiatelemetryTenant(val *NiatelemetryTenant) *NullableNiatelemetryTenant {
	return &NullableNiatelemetryTenant{value: val, isSet: true}
}

func (v NullableNiatelemetryTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNiatelemetryTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
